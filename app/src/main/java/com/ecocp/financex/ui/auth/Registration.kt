package com.ecocp.financex.ui.auth

import android.content.Intent
import android.os.Bundle
import android.widget.EditText
import android.widget.TextView
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import com.ecocp.financex.R
import com.ecocp.financex.data.User
import com.ecocp.financex.db.DatabaseHelper
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore

class Registration : AppCompatActivity() {

    private lateinit var auth: FirebaseAuth
    private lateinit var firestore: FirebaseFirestore

    private lateinit var registerEmailEditText: EditText
    private lateinit var registerUsernameEditText: EditText
    private lateinit var registerPasswordEditText: EditText
    private lateinit var registerButton: Button
    private lateinit var existingAccountTextView: TextView
    private lateinit var termsAndConditionsTextView: TextView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_registration)

        // Initialize Firebase Auth and Firestore
        auth = FirebaseAuth.getInstance()
        firestore = FirebaseFirestore.getInstance()

        // Initialize Views
        registerEmailEditText = findViewById(R.id.registeremail)
        registerUsernameEditText = findViewById(R.id.registerusername)
        registerPasswordEditText = findViewById(R.id.registerpassword)
        registerButton = findViewById(R.id.registeraccountbutton)
        existingAccountTextView = findViewById(R.id.existingaccounttextview)
        termsAndConditionsTextView = findViewById(R.id.termsandconditiontextview)

        // Register Button Click Listener
        registerButton.setOnClickListener {
            val email = registerEmailEditText.text.toString().trim()
            val username = registerUsernameEditText.text.toString().trim()
            val password = registerPasswordEditText.text.toString().trim()

            // Basic validation
            if (email.isEmpty() || username.isEmpty() || password.isEmpty()) {
                Toast.makeText(this, "All fields must be filled!", Toast.LENGTH_SHORT).show()
            } else {
                registerUser(email, username, password)
            }
        }

        // Terms and Conditions Click Listener
        termsAndConditionsTextView.setOnClickListener {
            // Here you can open the Terms and Conditions in a WebView or another activity
            Toast.makeText(this, "Opening Terms and Conditions", Toast.LENGTH_SHORT).show()
        }

        // Existing Account Click Listener (Redirect to Login)
        existingAccountTextView.setOnClickListener {
            startActivity(Intent(this, Login::class.java))
            finish()
        }
    }

    private fun registerUser(email: String, username: String, password: String) {
        auth.createUserWithEmailAndPassword(email, password)
            .addOnCompleteListener(this) { task ->
                if (task.isSuccessful) {
                    // Successfully registered user with Firebase
                    val user = auth.currentUser
                    val userData = hashMapOf(
                        "username" to username,
                        "email" to email
                    )

                    // Store user data in Firestore
                    firestore.collection("users").document(user!!.uid)
                        .set(userData)
                        .addOnSuccessListener {
                            // Insert user into SQLite database
                            val db = DatabaseHelper(this)
                            val newUser = User(
                                id = 0,  // id will be auto-generated by SQLite
                                username = username,
                                email = email,
                                password = password
                            )
                            val success = db.insertUser(newUser)

                            if (success) {
                                // Send verification email
                                user.sendEmailVerification()
                                    .addOnCompleteListener { verificationTask ->
                                        if (verificationTask.isSuccessful) {
                                            // Redirect to VerifyEmail screen
                                            startActivity(Intent(this, VerifyEmail::class.java))
                                            finish()  // Finish the registration activity so the user cannot go back to it
                                            Toast.makeText(this, "Verification email sent. Please check your inbox.", Toast.LENGTH_SHORT).show()
                                        } else {
                                            Toast.makeText(this, "Failed to send verification email. Try again later.", Toast.LENGTH_SHORT).show()
                                        }
                                    }
                            } else {
                                Toast.makeText(this, "Failed to save user in the database.", Toast.LENGTH_SHORT).show()
                            }
                        }
                        .addOnFailureListener { e ->
                            Toast.makeText(this, "Error: ${e.message}", Toast.LENGTH_SHORT).show()
                        }
                } else {
                    // If registration fails
                    Toast.makeText(this, "Registration Failed: ${task.exception?.message}", Toast.LENGTH_SHORT).show()
                }
            }
    }


}
